//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "item")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub product_id: i32,
    pub name: String,
    pub price: Decimal,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::product::Entity",
        from = "Column::ProductId",
        to = "super::product::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Product,
}

impl Related<super::product::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Product.def()
    }
}
// --Additional Implementations --------------------------------
// Define the input data structure for creating an item
#[derive(serde::Deserialize)]
pub struct CreateItemModel {
    pub product_id: i32,
    pub name: String,
    pub price: Decimal,
}
// Define the input data structure for updating an item
#[derive(serde::Deserialize)]
pub struct UpdateItemModel {
    pub id: i32,
    pub product_id: Option<i32>,
    pub name: Option<String>,
    pub price: Option<Decimal>,
}

// ------------------------------------------------------------

impl ActiveModelBehavior for ActiveModel {}
